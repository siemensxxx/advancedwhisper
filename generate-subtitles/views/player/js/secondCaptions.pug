script.
  function findIndexNumber(language, text) {
    const video = $('video')[0]
    const textTracks = video.textTracks;

    let foundIndex;
    let index = 0;
    for (const track of textTracks) {
      const trackLanguage = track.label
      if (language === trackLanguage) {
        for (const cue of track.cues) {
          if (cue.text === text) {
            foundIndex = index
          }
          index++
        }
      }
    }

    return foundIndex
  }

  function loadTextTracks() {
    const video = $('video')[0]
    const textTracks = video.textTracks;
    for (const track of textTracks) {
      track.mode = 'hidden';
    }
  }
  loadTextTracks()

  function findTextFromIndexNumber(language, index) {
    const video = $('video')[0]
    const textTracks = video.textTracks;

    let text;
    // l('text tracks');
    // l(textTracks);

    for (const track of textTracks) {
      const trackLanguage = track.label
      if (language === trackLanguage) {
        text = track.cues[index]?.text
        return text
      }
    }
    return false;
  }

  function getCurrentLanguageAndTrack() {
    const video = $('video')[0]
    const textTracks = video.textTracks;
    const trackNumber = player.currentTrack;
    const currentTrack = textTracks[trackNumber]

    const language = currentTrack.label;
    const text = currentTrack.activeCues?.[0]?.text;

    const indexNumber = findIndexNumber(language, text);

    return {
      language,
      text,
      indexNumber
    }
  }

  function getSecondCaptionsDefaults() {
    let secendCaptionsDefaults = localStorage.getItem('secondCaptionsDefaults')
    if (!secendCaptionsDefaults) {
      localStorage.setItem('secondCaptionsDefaults', JSON.stringify({}))
      return {}
    } else {
      secendCaptionsDefaults = JSON.parse(secendCaptionsDefaults)
      return secendCaptionsDefaults
    }
  }

  function setSecondCaptionsDefaults(secondCaptionsLanguage) {
    const secondCaptionsDefaults = getSecondCaptionsDefaults()
    secondCaptionsDefaults[language] = secondCaptionsLanguage;
    localStorage.setItem('secondCaptionsDefaults', JSON.stringify(secondCaptionsDefaults))
  }

  function buildMenuItemString(language, index) {
    return `<button data-plyr="language" id="languageName" type="button" role="menuitemradio" class="plyr__control" aria-checked="false" value="${index}">
                  <span id="languageValue" value="${language.name}">${language.name}<span class="plyr__menu__value"><span class="plyr__badge">${language.languageCode.toUpperCase()}</span></span></span>
              </button>`;
  }

  const disabledMenuItem = `
             <button data-plyr="language" type="button" role="menuitemradio" class="plyr__control" aria-checked="true" value="-1">
                <span>Disabled</span>
            </button>`;

  function createSecondCaptionsSetting() {
    const menuText = `${disabledMenuItem}
                    ${allLanguages.map((language, index) => {
      return buildMenuItemString(language, index)
    }).join('')}`;

    // show second caption option in popup
    $('.plyr__menu__container > div > div > div > button')[1].removeAttribute('hidden')

    // write Second Captions name with Disabled as default on popup
    $('.plyr__menu__container > div > div > div > button').eq(1).html('<span>Second Captions<span class="plyr__menu__value">Disabled</span></span>');

    // add menu items for when you click the button
    $("div[id*='secondCaptions'] div").html(menuText)

    // set default chosen value as Disabled
    $("div[id*='secondCaptions'] button span").eq(0).text('Disabled')

    // handle when language value is clicked
    $("div[id*='secondCaptions'] div button").click(function () {
      // mark all languages as not checked
      $("div[id*='secondCaptions'] div button").attr("aria-checked", "false");

      // get language of clicked value
      let languageValue = $(this).children().text();

      // remove last two characters from string (couldn't get only French instead of FrenchFR)
      if (/[A-Z]{2}$/.test(languageValue)) {
        languageValue = languageValue.slice(0, -2);
      }

      setSecondCaptionsDefaults(languageValue)

      // get current vtt text
      const currentLang = getCurrentLanguageAndTrack();

      const originalLanguage = $('div[role="menu"]').eq(0).children(1).children(1).eq(0).children(1).text();

      const originalText = findTextFromIndexNumber(originalLanguage, currentLang.indexNumber);

      const translationText = findTextFromIndexNumber(languageValue, currentLang.indexNumber);

      // const originalText = $("span.plyr__caption").text();

      // mark language as activated
      $(this).attr("aria-checked", "true");

      // update text at the top of the menu options
      $("div[id*='secondCaptions'] button span").eq(0).text(languageValue)

      // immediately add text if they didn't select Disabled
      if (languageValue !== 'Disabled') {
        $("span.plyr__caption").text(`${originalText}\n${translationText}`);
      }

      // update text on secondCaptions option
      $('.plyr__menu__container > div > div > div > button').eq(1)
        .find('span.plyr__menu__value')
        .text(languageValue)

      // click back button (mirrors plyr functionality)
      $("div[id*='secondCaptions'] button span").eq(0).click()
    })
  }
